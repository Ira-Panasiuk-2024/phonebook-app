{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Contacts app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of Contact App"
  },
  "servers": [
    {
      "url": "https://phonebook-app-j9nn.onrender.com",
      "description": "Production server"
    },
    {
      "url": "http://localhost:9393",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "Contacts",
      "description": "Contacts operations."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    }
  ],
  "paths": {
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get list of contacts",
        "operationId": "getContacts",
        "description": "Get paginated list of user's contacts with sorting, filtering and search functionality",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1,
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10,
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order (ascending or descending)"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "phoneNumber",
                "email",
                "contactType",
                "isFavourite",
                "createdAt",
                "updatedAt"
              ],
              "default": "phoneNumber",
              "example": "name"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "isFavourite",
            "schema": {
              "type": "boolean",
              "example": false
            },
            "description": "Filter contacts by favourite status"
          },
          {
            "in": "query",
            "name": "contactType",
            "schema": {
              "type": "string",
              "enum": [
                "work",
                "home",
                "personal"
              ],
              "example": "work"
            },
            "description": "Filter contacts by contact type"
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string",
              "example": "John"
            },
            "description": "Search query to filter contacts by name, phone number, or email (case-insensitive)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found contacts!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contacts!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/contacts"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1,
                          "description": "Current page number"
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 10,
                          "description": "Number of items per page"
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 25,
                          "description": "Total number of contacts"
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 3,
                          "description": "Total number of pages"
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true,
                          "description": "Whether there is a next page"
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false,
                          "description": "Whether there is a previous page"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create contact",
        "operationId": "createContact",
        "description": "Create a new contact with provided data. All fields except photo are required.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "phoneNumber",
                  "contactType"
                ],
                "properties": {
                  "name": {
                    "description": "Contact's name",
                    "type": "string",
                    "example": "John Doe",
                    "minLength": 3,
                    "maxLength": 20
                  },
                  "phoneNumber": {
                    "description": "Contact's phone number",
                    "type": "string",
                    "example": "+380000000004",
                    "pattern": "^(\\+380|380)[0-9]{9}$"
                  },
                  "email": {
                    "description": "Contact's email address",
                    "type": "string",
                    "format": "email",
                    "example": "john.doe@example.com"
                  },
                  "isFavourite": {
                    "description": "Whether the contact is marked as favourite",
                    "type": "boolean",
                    "example": false,
                    "default": false
                  },
                  "contactType": {
                    "description": "Contact's type/category",
                    "type": "string",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "example": "personal"
                  },
                  "photo": {
                    "description": "Link to contact`s photo",
                    "format": "binary",
                    "type": "string",
                    "example": "https://res.cloudinary.com/dlejcfotr/image/upload/v1743263889/cl4t7hdyrzxbzxhqeh5i.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a contact!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a contact!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/contacts"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact by ID",
        "operationId": "getContactById",
        "description": "Retrieve a specific contact by its ID. Contact must belong to the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "example": "67cece57cf044b5afacf7749"
            },
            "description": "MongoDB ObjectId of the contact"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found contact",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contact with id 67cece57cf044b5afacf7749!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/contacts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update contact",
        "operationId": "updateContact",
        "description": "Update an existing contact with provided data. Only provided fields will be updated.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "example": "67cece57cf044b5afacf7749"
            },
            "description": "MongoDB ObjectId of the contact to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Contact's name",
                    "type": "string",
                    "example": "John Doe",
                    "minLength": 3,
                    "maxLength": 20
                  },
                  "phoneNumber": {
                    "description": "Contact's phone number",
                    "type": "string",
                    "example": "+380000000004",
                    "pattern": "^(\\+380|380)[0-9]{9}$"
                  },
                  "email": {
                    "description": "Contact's email address",
                    "type": "string",
                    "format": "email",
                    "example": "john.doe@example.com"
                  },
                  "isFavourite": {
                    "description": "Whether the contact is marked as favourite",
                    "type": "boolean",
                    "example": false,
                    "default": false
                  },
                  "contactType": {
                    "description": "Contact's type/category",
                    "type": "string",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "example": "personal"
                  },
                  "photo": {
                    "description": "Link to contact`s photo",
                    "format": "binary",
                    "type": "string",
                    "example": "https://res.cloudinary.com/dlejcfotr/image/upload/v1743263889/cl4t7hdyrzxbzxhqeh5i.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated contact",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a contact!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/contacts"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete contact",
        "operationId": "deleteContact",
        "description": "Permanently delete a contact by its ID. Contact must belong to the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "example": "67cece57cf044b5afacf7749"
            },
            "description": "MongoDB ObjectId of the contact to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Contact successfully deleted (no content returned)"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User registration",
        "operationId": "register",
        "description": "User registration with provided credentials",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe",
                    "description": "User full name",
                    "minLength": 3,
                    "maxLength": 20
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "example@mail.com",
                    "description": "User email address"
                  },
                  "password": {
                    "type": "string",
                    "example": "pCVVJHbCsY57+",
                    "description": "User password. Must contain at least one uppercase letter, one lowercase letter, one number, and one special character.",
                    "minLength": 8,
                    "maxLength": 30,
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,30}$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "headers": {
              "Set-Cookie": {
                "description": "Session cookies (refreshToken and sessionId)",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=abc123; sessionId=def456; HttpOnly; Secure; SameSite=Lax"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken",
                        "user"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "FZ5lUcIf02vxG4jLikawUhFHm2SwUdX5J4ChyJSZQ2sUJYShhEBPmdKF3EUCHtSx",
                          "description": "Access token for API requests"
                        },
                        "user": {
                          "type": "object",
                          "$ref": "#/components/schemas/userPublic"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log In User",
        "operationId": "login",
        "description": "Log In with provided credentials",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "example@mail.com",
                    "description": "User email address"
                  },
                  "password": {
                    "type": "string",
                    "example": "pCVVJHbCsY57+",
                    "description": "User password. Must contain at least one uppercase letter, one lowercase letter, one number, and one special character.",
                    "minLength": 8,
                    "maxLength": 30,
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,30}$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "headers": {
              "Set-Cookie": {
                "description": "Session cookies (refreshToken and sessionId)",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=abc123; sessionId=def456; HttpOnly; Secure; SameSite=Lax"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken",
                        "user"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "FZ5lUcIf02vxG4jLikawUhFHm2SwUdX5J4ChyJSZQ2sUJYShhEBPmdKF3EUCHtSx",
                          "description": "Access token for API requests"
                        },
                        "user": {
                          "type": "object",
                          "$ref": "#/components/schemas/userPublic"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401",
            "description": "User is not authenticated"
          },
          "404": {
            "$ref": "#/components/responses/404",
            "description": "User not found"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User logout",
        "operationId": "logout",
        "description": "User logout from account",
        "security": [],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Session ID cookie"
          },
          {
            "in": "cookie",
            "name": "refreshToken",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Refresh token cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully logged out",
            "headers": {
              "Set-Cookie": {
                "description": "Cleared session cookies",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=; sessionId=; expires=Thu, 01 Jan 1970 00:00:00 GMT"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh user session",
        "operationId": "refreshSession",
        "description": "Refreshing user session taking the token from cookies",
        "security": [],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Session ID cookie"
          },
          {
            "in": "cookie",
            "name": "refreshToken",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Refresh token cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Session successfully refreshed",
            "headers": {
              "Set-Cookie": {
                "description": "New session cookies (refreshToken and sessionId)",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=xyz789; sessionId=uvw012; HttpOnly; Secure; SameSite=Lax"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken",
                        "user"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "FZ5lUcIf02vxG4jLikawUhFHm2SwUdX5J4ChyJSZQ2sUJYShhEBPmdKF3EUCHtSx",
                          "description": "New access token for API requests"
                        },
                        "user": {
                          "type": "object",
                          "$ref": "#/components/schemas/userPublic"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401",
            "description": "Session not found"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "userPublic": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "format": "objectId",
            "example": "67cd81343b84f810f27e521f"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe",
            "minLength": 3,
            "maxLength": 20
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "format": "email",
            "example": "example@mail.com"
          },
          "createdAt": {
            "description": "User's creation date",
            "type": "string",
            "format": "date-time",
            "example": "2025-04-01T00:00:00.000Z",
            "readOnly": true
          },
          "updatedAt": {
            "description": "User's last update date",
            "type": "string",
            "format": "date-time",
            "example": "2025-04-01T00:00:00.000Z",
            "readOnly": true
          }
        }
      },
      "contacts": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "phoneNumber",
          "contactType",
          "userId"
        ],
        "properties": {
          "_id": {
            "description": "Contact's unique identifier",
            "type": "string",
            "format": "objectId",
            "example": "67cece57cf044b5afacf7749"
          },
          "userId": {
            "description": "ID of the user who owns this contact",
            "type": "string",
            "format": "objectId",
            "example": "67cd81343b84f810f27e521f"
          },
          "name": {
            "description": "Contact's full name",
            "type": "string",
            "minLength": 3,
            "maxLength": 20,
            "example": "John Doe"
          },
          "phoneNumber": {
            "description": "Contact's phone number (Ukrainian format)",
            "type": "string",
            "pattern": "^(\\+380|380)[0-9]{9}$",
            "example": "+380671234567"
          },
          "email": {
            "description": "Contact's email address",
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "isFavourite": {
            "description": "Whether the contact is marked as favourite",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "contactType": {
            "description": "Contact's category/type",
            "type": "string",
            "enum": [
              "work",
              "home",
              "personal"
            ],
            "default": "personal",
            "example": "personal"
          },
          "photo": {
            "description": "URL to contact's photo (local upload or Cloudinary)",
            "type": "string",
            "format": "uri",
            "example": "https://res.cloudinary.com/dlejcfotr/image/upload/v1743263889/cl4t7hdyrzxbzxhqeh5i.jpg"
          },
          "createdAt": {
            "description": "Contact creation timestamp",
            "type": "string",
            "format": "date-time",
            "example": "2025-01-26T14:30:00.000Z",
            "readOnly": true
          },
          "updatedAt": {
            "description": "Contact last modification timestamp",
            "type": "string",
            "format": "date-time",
            "example": "2025-01-26T14:30:00.000Z",
            "readOnly": true
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid request data"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found Error",
        "content": {
          "application\\json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Resource conflict occurred"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application\\json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}